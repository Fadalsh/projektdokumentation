{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"BUA VIVO","text":""},{"location":"#titel-2","title":"Titel 2","text":""},{"location":"#titel-3","title":"Titel 3","text":"<p>DThis is a a sentence written in markdown And this is a line under it</p> <ul> <li>punkt1</li> <li>punkt 2</li> <li>unterpunkt</li> </ul>"},{"location":"OpenStackServers/","title":"Technische Dokumentation","text":""},{"location":"OpenStackServers/#server-setup","title":"Server Setup","text":"<p>Das BUA-VIVO Projekt nutzt insgesamt 3 Live-Server sowie einen Testserver.</p> <p>Alle Server befinden sich im HU Open Stack</p> <ul> <li>Link: https://host.hu-berlin.de/auth/login/?next=/</li> <li>Freischaltung durch das OpenStack Team</li> </ul>"},{"location":"OpenStackServers/#serverdetails","title":"Serverdetails","text":"<ol> <li>BUA-VIVO<ol> <li>m1.large</li> <li>8 GB RAM</li> <li>4 VCPU</li> <li>80 GB Festplattenspeicher</li> </ol> </li> <li>SolR<ol> <li>M1.small</li> <li>2 GB RAM</li> <li>1 VCPU</li> <li>20 GB Festplattenspeicher</li> </ol> </li> <li>Datenverarbeitung<ol> <li>m1.medium</li> <li>4 GB RAM</li> <li>2 VCPU</li> <li>40 GB Festplattenspeicher</li> </ol> </li> </ol>"},{"location":"OpenStackServers/#serverzugang","title":"Serverzugang","text":"<p>Aus dem HU-Netz sind die Server via SSH zu erreichen, nachdem ihnen eine floating IP zugewiesen wurde.</p> <pre><code>ssh ubuntu@141.20.184.XXX\n</code></pre> <p>Nachdem Agent-Forwarding aktiviert ist (siehe SSH-Config), k\u00f6nnen Verbindungen auf Server ohne floating IP hergestellt werden. Wenn WSL benutzt wird muss der SSH-Agent vorher evaluiert werden</p> <p>F\u00fcr WSL:</p> <pre><code>eval $(ssh-agent)\n</code></pre> <p>Nach Aktivierung des Agent-Forwardings:</p> <pre><code>Nutzer@DESKTOP:~$ ssh ubuntu@141.20.184.XXX\ndebian@VIVO-Server:~$ ssh ubuntu@192.168.10.XXX\n</code></pre>"},{"location":"OpenStackServers/#server-installation","title":"Server-Installation","text":"<p>Das Grundsetup der Server wird \u00fcber die Open-Stack Webseite vorgenommen.</p> <p>Das OS auf allen Servern ist Ubuntu. Spezifikationen siehe oben.</p> <p>Erste SSH-Regeln via OpenStack setzen.</p> <p>Floating IPs an den Vivo- und an den DV-Server anh\u00e4ngen</p>"},{"location":"OpenStackServers/#portfreigaben","title":"Portfreigaben","text":"<ul> <li>ssh_group</li> </ul> <p> *   default security group</p> <p> *   ping_group</p> <p> *   apache_tomcat</p> <p> *   solr</p> <p></p>"},{"location":"OpenStackServers/#updates","title":"Updates","text":"<p>Das Debian OS auf den OpenStack Servern ist nicht aktuell. Betriebssystem und Programme m\u00fcssen vor der ersten Benutzung upgedatet werden.</p> <pre><code>sudo apt update\nsudo apt upgrade\nsudo apt-get update\nsudo apt-get upgrade\n</code></pre>"},{"location":"OpenStackServers/#zusatzliche-ssh-keys-und-ssh-config","title":"Zus\u00e4tzliche SSH-Keys und SSH-Config","text":"<p>Der SSH-Ordner liegt im User-Ordner, ist aber ausgeblendet</p> <pre><code>cd ~/.ssh\n</code></pre> <p>Zus\u00e4tzliche SSH-Keys m\u00fcssen den authorized-keys hinzugef\u00fcgt werden. Nano ist vorinstalliert und kann zum \u00f6ffnen der Datei verwendet werden. DIe Keys dann einfach hineinkopieren.</p> <pre><code>nano ~/.ssh/authorized_keys \n</code></pre> <p>In der SSH-Config muss SSH-Forwarding aktiviert werden, um auf Server im Subnetz zugreifen zu k\u00f6nnen:</p> <pre><code>nano ~/.ssh/config\n</code></pre> <p>Dort Folgendes einf\u00fcgen:</p> <pre><code>Host 192.168.10.*\n    ForwardAgent yes\n    AddKeysToAgent yes\n</code></pre>"},{"location":"api-klassifikationspipelines/","title":"Klassifikations-pipeline","text":""},{"location":"apiimport/","title":"Dokumentimport \u00fcber API","text":""},{"location":"clusters/","title":"Cluster-scripte","text":""},{"location":"kairntech/","title":"Kairntech","text":""},{"location":"klassifikationspipelines/","title":"Pipelines f\u00fcr dokumentklassifikation","text":""},{"location":"mongoimport/","title":"Mongo-import","text":""},{"location":"mongoserver/","title":"Mongo server","text":""},{"location":"ontologien/","title":"Ontologies","text":"<p>Ontologies, are, in the context of Informatics, defined as \"formal representation of concepts, their attributes and relations between them within a specific domain\"</p> <p>In our case, the project needed to work with Ontologies, in aiming to build a platform for researching, collecting and presenting scientists and their research as well as their activities within and across the members of the Berlin University Alliance (BUA), using the Linked Open Data software VIVO</p> <p>VIVO and more specifically VITRO is software based on- and using Ontologies, originally representing and describing the American Academic Domain. As the entities and their terms found in the American academic domain in many cases diverge and also are ambigous in respect to the entities and their naming in the German (also European) academic domain, a greater part of the work within the BUA-project has been to create a mapping of the German domain.</p> <p>The challenges found in creating an ontology for the German domain on basis of the original VIVO ontology is described in the bachelor thesis: \"Mapping und Erweiterung der Ontologie des Forschungsinformationssystems VIVO\", and parallely, some work has already been done by the VIVO-DE group. </p> <p>The group redifined topics like \"Faculty\", which, in the American domain is the teaching staff, i.e. the entire group of teachers. While a \"Fakult\u00e4t\" at a German university is an organizational unit for the thematic structure of chairs. A professor in the American domain is a teacher, whereas a German professor is (generally) a holder of a chair.</p> <p>With this work as a basis, we extended the VIVO ontology with multiple topics through our work in analysing the \"Organigrams\" (organisational charts) of each member organisation. Structurally the organisational structures would be quite similar, but semantically, the wording, and sometimes the functional meaning of the units would be quite different. To ensure that plurality and local varieties be kept, we needed to take into account that each alliance member would need to use and find research information related to their own terminology. </p>"},{"location":"pipelines/","title":"Mongo 2 VIVO","text":""},{"location":"solrserver/","title":"SOLR Server","text":""},{"location":"testserver/","title":"Testserver","text":""},{"location":"vivo/","title":"Systemvorraussetzungen","text":"<p>Sollte zwischen dem Server-Setup und der Installation Zeit vergangen sein, sollte apt nochmal ein Update bekommen:</p> <pre><code>sudo apt update\n</code></pre> <p>Open Java Developer Kit:</p> <pre><code>sudo apt install default-jdk\n</code></pre> <p>Maven</p> <pre><code>sudo apt install maven\n</code></pre> <p>Curl</p> <pre><code>sudo apt install curl\n</code></pre> <p>git</p> <pre><code>sudo apt install git\n</code></pre> <p>Apache Tomcat</p> <p>Tomcat bekommt hier keine eigene Benutzergruppe, da VIVO im Tomcat-Verzeichnet lebt und arbeitet.</p> <p>Der Tomcat Download kann prinzipiell \u00fcberall hin erfolgen, es ist aber angeraten ihn in /tmp auszuf\u00fchren.</p> <pre><code>cd /tmp\ncurl -O http://www-eu.apache.org/dist/tomcat/tomcat-9/v9.0.11/bin/apache-tomcat-9.0.11.tar.gz\n</code></pre> <p>Die Tomcat Installation erfolgt ins opt/tomcat-Verzeichnis:</p> <pre><code>sudo mkdir /opt/tomcat\nsudo tar xzvf apache-tomcat-9*tar.gz -C /opt/tomcat --strip-components=1\n</code></pre> <p>Erstellen eines systemd service files f\u00fcr Tomcat:</p> <pre><code>sudo nano /etc/systemd/system/tomcat.service\n</code></pre> <p>mit Folgendem Inhalt:</p> <pre><code>[Unit]\nDescription=Apache Tomcat Web Application Container\nAfter=network.target\n\n[Service]\nType=forking\n\nEnvironment=JAVA_HOME=/usr/lib/jvm/java-1.11.0-openjdk-amd64\nEnvironment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid\nEnvironment=CATALINA_HOME=/opt/tomcat\nEnvironment=CATALINA_BASE=/opt/tomcat\nEnvironment='CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC'\nEnvironment='JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom'\n\nExecStart=/opt/tomcat/bin/startup.sh\nExecStop=/opt/tomcat/bin/shutdown.sh\n\nUMask=0007\nRestartSec=10\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Vivo empfiehlt <code>**-XX:MaxPermSize=128m**</code> in die CATALINA_OPTS aufzunehmen. Ebenfalls wird von VIVO ein max heap von 512m empfohlen, wir arbeiten aktuell mit 1024M. Bisher gab es keine Performanzeinbu\u00dfen.</p> <p>Um UTF-8 Kompatibilit\u00e4t in Tomcat zu aktivieren, die setup.xml \u00f6ffnen:</p> <pre><code>nano /opt/tocat/conf/server.xml\n</code></pre> <p>und URI Encoding in den Connector-Elementen aktivieren:</p> <pre><code> &lt;Server ...&gt;\n\n  &lt;Service ...&gt;\n\n    &lt;Connector ... URIEncoding=\"UTF-8\"/&gt;\n\n      ...\n\n    &lt;/Connector&gt;\n\n  &lt;/Service&gt;\n\n&lt;/Server&gt; \n</code></pre> <p>Tomcat starten / stoppen</p> <pre><code>sudo systemctl start tomcat\nsudo systemctl stop tomcat\n</code></pre>"},{"location":"vivo/#vivo-12","title":"VIVO 12","text":"<p>Download</p> <p>Der VIVO Download kann in einen Ordner im /tmp oder in das user-Verzeichnis erfolgen. Auf dem Testserver ist es im User-Verzeichnis f\u00fcr einfache Erreichbarkeit, auf dem Live-Server wird es ins /tmp geladen.</p> <pre><code>git clone https://github.com/vivo-project/Vitro.git Vitro -b rel-1.12.2-maint\ngit clone https://github.com/vivo-project/VIVO.git VIVO -b rel-1.12.2-maint\ngit clone https://github.com/vivo-project/Vitro-languages.git Vitro-languages -b rel-1.12.2-maint \ngit clone https://github.com/vivo-project/VIVO-languages.git VIVO-languages -b rel-1.12.2-maint \n</code></pre> <p>Die Vivo Installationsdatein werden nach der Installation nicht mehr gebraucht und k\u00f6nnen gel\u00f6scht werden. Auf dem Testserver liegen die Dateien im home-Verzeichnis f\u00fcr den Fall einer Neuinstallation.</p> <p>Installation</p> <pre><code>mvn install -s example-settings.xml\n</code></pre> <p>Die Installation erstellt 2 Ordner:</p> <ul> <li>vivo-home: /usr/local/vivo -&gt; enth\u00e4lt die TripleStores, SPARQL-Queries f\u00fcr den Seitenaufbau und Java-Code,...</li> <li>webapps: /opt/tomcat/webapps/vivo -&gt; enth\u00e4lt die Templates, Bilder, Texte, Frontend-Informationen, ...</li> </ul> <p>Beide Ordner sind in GitLab gespiegelt:</p> <p>Der Installationsordner im usr-Verzeichnis: https://scm.cms.hu-berlin.de/kotschfl/vivo_webapps</p> <p>Der Webapps-Ordner im tomcat-Verzeichnis: https://scm.cms.hu-berlin.de/kotschfl/vivo_bua</p> <p>(Benennung in den Links ist flasch! - die hier angegebene Zuordnung stimmt)</p> <p>Nach der Installation - Webapps</p> <p>Das Frontend kann nach der Installation direkt aus dem Gitlab gezogen werden:</p> <ol> <li>den gesamten Inhalt von /opt/tomcat/webapps/vivo l\u00f6schen</li> </ol> <pre><code>sudo rm -r /opt/tomcat/webapps/vivo/*\n</code></pre> <ol> <li>git im webapps/vivo-Ordner initialisieren</li> </ol> <pre><code>git init\ngit commit -m \"init\" \ngit stash\n</code></pre> <ol> <li>das Repository vom Gitlab clonen</li> </ol> <pre><code>git clone https://scm.cms.hu-berlin.de/kotschfl/vivo_bua main\n</code></pre> <p>Ein git pull sollte theoretisch das selbe Ergebnis erzielen, hat aber bei bisherigen Versuchen heads in einige config-Dateien geschrieben. Die git-clone Methode ist sauber und sichert das Anzeigen des exakten Frontends.</p> <p>Ein Neustart des Tomcat-Servers ist prinzipiell nicht n\u00f6tig, wird aber empfohlen.</p> <p>Um die Frontend-Updates im Browser anzuzeigen, muss der Browser-Cache gel\u00f6scht werden.</p> <p>Nach der Installation - vivo-home</p> <p>Vor der ersten Verwendung Vivo-home muss die runtime.properties angepasst werden. Das kann entweder h\u00e4ndisch geschehen oder die properties-Datei kann durch die Datei im vivo-home-Gitlab ersetzt werden.</p> <p>F\u00fcr eine manuelle Bearbeitung sind folgende \u00c4nderungen notwendig:</p> <pre><code>Vitro.defaultNamespace = http://vivo.berlin-university-alliance.de/individual/\n\nrootUser.emailAddress = xxx@yyy.zzz\n\nvitro.local.solr.url = http://192.168.10.20:8983/solr/vivocore\n</code></pre> <p>Die rootUser.emailAddress ist nur f\u00fcr den ersten Login relevant und kann abweichen. Die IP in der SolR URL muss angepasst werden. </p>"},{"location":"vivoserver/","title":"VIVO-Server","text":""},{"location":"vokabularen/","title":"Vokabularen","text":""},{"location":"vorklassifikationspipelines/","title":"Vorklassifikation","text":""}]}